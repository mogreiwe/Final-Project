ggplot(data, aes(x = nfci, y = gar_est)) + geom_point() + theme_classic() +
geom_smooth(method='lm', formula= y~x, se = FALSE) + stat_smooth(method='nls', formula= y~x+x**2, se = FALSE)
ggplot(data, aes(x = nfci, y = gar_est)) + geom_point() + theme_classic() +
stat_smooth(method='nls', formula= y~x+x**2)
?nls
# Create plots
ggplot(data, aes(x = nfci, y = gar_est)) + geom_point() + theme_classic() +
geom_smooth(method='lm', formula= y~x, se = FALSE) + stat_smooth(method='nls', formula= y~SSlogis(x, x^2))
ggplot(data, aes(x = nfci, y = gar_est)) + geom_point() + theme_classic() +
geom_smooth(method='lm', formula= y~x, se = FALSE) + geom_smooth(method='lm', formula= y~poly(x,2), se = FALSE)
ggplot(data, aes(x = nfci, y = gar_est)) + geom_point() + theme_stata() +
geom_smooth(method='lm', formula= y~x, se = FALSE) + geom_smooth(method='lm', formula= y~poly(x,2), se = FALSE)
ggplot(data, aes(x = nfci, y = gar_est)) + geom_point() + theme_stata() +
geom_smooth(method='lm', formula= y~x, se = FALSE) + geom_smooth(method='lm', formula= y~poly(x,2), se = FALSE, color = "red")
# Create plots
ggplot(data, aes(x = nfci, y = gar_est)) + geom_point() + theme_classic() +
geom_smooth(method='lm', formula= y~x, se = FALSE) + geom_smooth(method='lm', formula= y~poly(x,2), se = FALSE, color = "red")
?geom_point
?qreg
library(data.table)
# Forecast horizon
h <- 4
nfci <- read.csv("brownlees\\gar-replication\\data\\input\\nfci.csv")
setnames(nfci, old = "USA", new = "nfci")
nfci_us <- nfci[, c("Dates", "nfci")]
nfci_us$nfci <- nfci_us$nfci
gdp <- read.csv("brownlees\\gar-replication\\data\\input\\gdp.csv")
setnames(gdp, old = "USA", new = "gdp")
gdp_us <- gdp[, c("Dates", "gdp")]
# create lagged values at relevant forecast horizon
gdp_us[,"gdp_f"] <- sapply(1:nrow(gdp_us), function(x) gdp_us[,"gdp"][x+h])
# Merge datatables
data <- merge(gdp_us, nfci_us, by = "Dates")
write.csv(data, file = "data\\data.csv")
# Parameters
sigma_u = 1.257
beta = 0.529
gamma = 0.044
# Load data
data <- read.csv("data\\data.csv")
# Calculate conditional variance
for (i in 1:nrow(data)){
if (i == 1){
data[i,"sigma_it"] <- sigma_u - gamma*data[i,"nfci"]
}
else {
data[i,"sigma_it"] <- (1-beta)*(sigma_u - gamma*data[i,"nfci"]) + beta*data[i-1,"sigma_it"]
}
}
## Simulate path of GaR
# Simulate to get conditional quantiles of the error terms
for (i in 1:nrow(data)){
data[i, "quant_it"] <- quantile(rnorm(100, 0, data[i,"sigma_it"]), probs = 0.05)
}
# Fit linear model for conditional mean
m1 <- lm(gdp_f ~ gdp + nfci, data = data)
data[,"gdp_fit"] <- m1$coefficients[1] + m1$coefficients[2]*data[,"gdp"] + m1$coefficients[3]*data[,"nfci"]
data[,"gar_est"] <- data[,"gdp_fit"] + data[,"quant_it"]
# Create plots
ggplot(data, aes(x = nfci, y = gar_est)) + geom_point() + theme_classic() +
geom_smooth(method='lm', formula= y~x, se = FALSE) + geom_smooth(method='lm', formula= y~poly(x,2), se = FALSE, color = "red")
ggplot(data, aes(x = nfci, y = gar_est)) + geom_point() + theme_classic() + ylab(expression(GaR[0.05]^(t+8)))
geom_smooth(method='lm', formula= y~x, se = FALSE) + geom_smooth(method='lm', formula= y~poly(x,2), se = FALSE, color = "red")
# Create plots
ggplot(data, aes(x = nfci, y = gar_est)) + geom_point() + theme_classic() + ylab(expression(GaR[0.05]^(t+8))) +
geom_smooth(method='lm', formula= y~x, se = FALSE) + geom_smooth(method='lm', formula= y~poly(x,2), se = FALSE, color = "red")
ggplot(data, aes(x = nfci, y = gar_est)) + geom_point() + theme_classic() + ylab(expression(GaR[.05]^{t+8})) +
geom_smooth(method='lm', formula= y~x, se = FALSE) + geom_smooth(method='lm', formula= y~poly(x,2), se = FALSE, color = "red")
getwd()
ggsave("output\\figures\\plot_raw.png")
data_reg <- Reduce(merge, list(data, cg, cr, ts, hp))
# Regression analysis
data <- read.csv("data\\data.csv")
cg <- read.csv("brownlees\\gar-replication\\data\\input\\cg.csv")
setnames(cg, old = "USA", new = "cg")
cg_us <- cg[, c("Dates", "cg")]
cr <- read.csv("brownlees\\gar-replication\\data\\input\\cr.csv")
setnames(cr, old = "USA", new = "cr")
cr_us <- cr[, c("Dates", "cr")]
ts <- read.csv("brownlees\\gar-replication\\data\\input\\ts.csv")
setnames(tw, old = "USA", new = "ts")
# Regression analysis
data <- read.csv("data\\data.csv")
cg <- read.csv("brownlees\\gar-replication\\data\\input\\cg.csv")
setnames(cg, old = "USA", new = "cg")
cg_us <- cg[, c("Dates", "cg")]
cr <- read.csv("brownlees\\gar-replication\\data\\input\\cr.csv")
setnames(cr, old = "USA", new = "cr")
cr_us <- cr[, c("Dates", "cr")]
ts <- read.csv("brownlees\\gar-replication\\data\\input\\ts.csv")
setnames(ts, old = "USA", new = "ts")
ts_us <- ts[, c("Dates", "ts")]
hp <- read.csv("brownlees\\gar-replication\\data\\input\\hp.csv")
setnames(hp, old = "USA", new = "hp")
hp_us <- hp[, c("Dates", "hp")]
data_reg <- Reduce(merge, list(data, cg, cr, ts, hp))
# Regression analysis
data <- read.csv("data\\data.csv")
cg <- read.csv("brownlees\\gar-replication\\data\\input\\cg.csv")
setnames(cg, old = "USA", new = "cg")
cg_us <- cg[, c("Dates", "cg")]
cr <- read.csv("brownlees\\gar-replication\\data\\input\\cr.csv")
setnames(cr, old = "USA", new = "cr")
cr_us <- cr[, c("Dates", "cr")]
ts <- read.csv("brownlees\\gar-replication\\data\\input\\ts.csv")
setnames(ts, old = "USA", new = "ts")
ts_us <- ts[, c("Dates", "ts")]
hp <- read.csv("brownlees\\gar-replication\\data\\input\\hp.csv")
setnames(hp, old = "USA", new = "hp")
hp_us <- hp[, c("Dates", "hp")]
data <- merge(data,cg)
data <- merge(data,cr)
data <- merge(data,ts)
data <- merge(data,hp)
rqfit1 <- rq(gdp_f~gdp+nfci+cg+cr+ts+hp, data = data)
?rq
install.packages("quantreg")
library(quantreg)
rqfit1 <- rq(gdp_f~gdp+nfci+cg+cr+ts+hp, data = data)
# Regression analysis
data <- read.csv("data\\data.csv")
cg <- read.csv("brownlees\\gar-replication\\data\\input\\cg.csv")
setnames(cg, old = "USA", new = "cg")
cg_us <- cg[, c("Dates", "cg")]
cr <- read.csv("brownlees\\gar-replication\\data\\input\\cr.csv")
setnames(cr, old = "USA", new = "cr")
cr_us <- cr[, c("Dates", "cr")]
ts <- read.csv("brownlees\\gar-replication\\data\\input\\ts.csv")
setnames(ts, old = "USA", new = "ts")
ts_us <- ts[, c("Dates", "ts")]
hp <- read.csv("brownlees\\gar-replication\\data\\input\\hp.csv")
setnames(hp, old = "USA", new = "hp")
hp_us <- hp[, c("Dates", "hp")]
data <- merge(data,cg)
# Regression analysis
data <- read.csv("data\\data.csv")
cg <- read.csv("brownlees\\gar-replication\\data\\input\\cg.csv")
setnames(cg, old = "USA", new = "cg")
cg_us <- cg[, c("Dates", "cg")]
cr <- read.csv("brownlees\\gar-replication\\data\\input\\cr.csv")
setnames(cr, old = "USA", new = "cr")
cr_us <- cr[, c("Dates", "cr")]
ts <- read.csv("brownlees\\gar-replication\\data\\input\\ts.csv")
setnames(ts, old = "USA", new = "ts")
ts_us <- ts[, c("Dates", "ts")]
hp <- read.csv("brownlees\\gar-replication\\data\\input\\hp.csv")
setnames(hp, old = "USA", new = "hp")
hp_us <- hp[, c("Dates", "hp")]
View(cg)
# Regression analysis
data <- read.csv("data\\data.csv")
cg <- read.csv("brownlees\\gar-replication\\data\\input\\cg.csv")
setnames(cg, old = "USA", new = "cg")
cg <- cg[, c("Dates", "cg")]
cr <- read.csv("brownlees\\gar-replication\\data\\input\\cr.csv")
setnames(cr, old = "USA", new = "cr")
cr <- cr[, c("Dates", "cr")]
ts <- read.csv("brownlees\\gar-replication\\data\\input\\ts.csv")
setnames(ts, old = "USA", new = "ts")
ts <- ts[, c("Dates", "ts")]
hp <- read.csv("brownlees\\gar-replication\\data\\input\\hp.csv")
setnames(hp, old = "USA", new = "hp")
hp <- hp[, c("Dates", "hp")]
data <- merge(data,cg)
data <- merge(data,cr)
data <- merge(data,ts)
data <- merge(data,hp)
data <- read.csv("data\\data.csv")
cg <- read.csv("brownlees\\gar-replication\\data\\input\\cg.csv")
setnames(cg, old = "USA", new = "cg")
cg <- cg[, c("Dates", "cg")]
cr <- read.csv("brownlees\\gar-replication\\data\\input\\cr.csv")
setnames(cr, old = "USA", new = "cr")
cr <- cr[, c("Dates", "cr")]
ts <- read.csv("brownlees\\gar-replication\\data\\input\\ts.csv")
setnames(ts, old = "USA", new = "ts")
ts <- ts[, c("Dates", "ts")]
hp <- read.csv("brownlees\\gar-replication\\data\\input\\hp.csv")
setnames(hp, old = "USA", new = "hp")
hp <- hp[, c("Dates", "hp")]
View(cg)
View(data)
View(cg)
View(cr)
typeof(cr$Dates)
typeof(data$Dates)
View(cr)
View(cr_us)
View(cr)
View(hp)
View(gdp_us)
View(cg)
install.packages("zoo")
cg$Dates <- as.yearqtr(cg$Dates, format = "%Y-%m-%d")
library(zoo)
cg$Dates <- as.yearqtr(cg$Dates, format = "%Y-%m-%d")
View(cg)
View(data)
typeof(cg$Dates)
install.packages("lubridate")
library(lubridate)
cg <- read.csv("brownlees\\gar-replication\\data\\input\\cg.csv")
setnames(cg, old = "USA", new = "cg")
cg <- cg[, c("Dates", "cg")]
cg <- read.csv("brownlees\\gar-replication\\data\\input\\cg.csv")
setnames(cg, old = "USA", new = "cg")
cg <- cg[, c("Dates", "cg")]
cg$Dates <- as.Date(cg$Dates)
cg$Dates2 <- paste0(year(cg$Dates),"-",quarter(cg$Dates))
View(cg)
rm(list = ls())
library(ggplot2)
library(quantreg)
library(data.table)
library(zoo)
library(lubridate)
set.seed(1234)
# Forecast horizon
h <- 4
nfci <- read.csv("brownlees\\gar-replication\\data\\input\\nfci.csv")
setnames(nfci, old = "USA", new = "nfci")
nfci_us <- nfci[, c("Dates", "nfci")]
gdp <- read.csv("brownlees\\gar-replication\\data\\input\\gdp.csv")
setnames(gdp, old = "USA", new = "gdp")
gdp_us <- gdp[, c("Dates", "gdp")]
# create lagged values at relevant forecast horizon
gdp_us[,"gdp_f"] <- sapply(1:nrow(gdp_us), function(x) gdp_us[,"gdp"][x+h])
# Merge datatables
data <- merge(gdp_us, nfci_us, by = "Dates")
write.csv(data, file = "data\\data.csv")
# Parameters
sigma_u = 1.257
beta = 0.529
gamma = 0.044
# Load data
data <- read.csv("data\\data.csv")
# Calculate conditional variance
for (i in 1:nrow(data)){
if (i == 1){
data[i,"sigma_it"] <- sigma_u - gamma*data[i,"nfci"]
}
else {
data[i,"sigma_it"] <- (1-beta)*(sigma_u - gamma*data[i,"nfci"]) + beta*data[i-1,"sigma_it"]
}
}
## Simulate path of GaR
# Simulate to get conditional quantiles of the error terms
for (i in 1:nrow(data)){
data[i, "quant_it"] <- quantile(rnorm(100, 0, data[i,"sigma_it"]), probs = 0.05)
}
# Fit linear model for conditional mean
m1 <- lm(gdp_f ~ gdp + nfci, data = data)
data[,"gdp_fit"] <- m1$coefficients[1] + m1$coefficients[2]*data[,"gdp"] + m1$coefficients[3]*data[,"nfci"]
data[,"gar_est"] <- data[,"gdp_fit"] + data[,"quant_it"]
# Create plots
ggplot(data, aes(x = nfci, y = gar_est)) + geom_point() + theme_classic() + ylab(expression(GaR[.05]^{t+8})) + xlab("NFCI")
ggsave("output\\figures\\plot_raw.png")
ggplot(data, aes(x = nfci, y = gar_est)) + geom_point() + theme_classic() + ylab(expression(GaR[.05]^{t+8})) + xlab("NFCI")
geom_smooth(method='lm', formula= y~x, se = FALSE) + geom_smooth(method='lm', formula= y~poly(x,2), se = FALSE, color = "red")
ggplot(data, aes(x = nfci, y = gar_est)) + geom_point() + theme_classic() + ylab(expression(GaR[.05]^{t+8})) + xlab("NFCI") +
geom_smooth(method='lm', formula= y~x, se = FALSE) + geom_smooth(method='lm', formula= y~poly(x,2), se = FALSE, color = "red")
ggsave("output\\figures\\plot_lmfit.png")
# Regression analysis
data <- read.csv("data\\data.csv")
cg <- read.csv("brownlees\\gar-replication\\data\\input\\cg.csv")
setnames(cg, old = "USA", new = "cg")
cg <- cg[, c("Dates", "cg")]
cg$Dates <- as.Date(cg$Dates)
cg$Dates <- paste0(year(cg$Dates),"-Q",quarter(cg$Dates))
data <- merge(data,cg)
View(data)
# Regression analysis
data <- read.csv("data\\data.csv")
cg <- read.csv("brownlees\\gar-replication\\data\\input\\cg.csv")
setnames(cg, old = "USA", new = "cg")
cg <- cg[, c("Dates", "cg")]
cg$Dates <- as.Date(cg$Dates)
cg$Dates <- paste0(year(cg$Dates),"-Q",quarter(cg$Dates))
cr <- read.csv("brownlees\\gar-replication\\data\\input\\cr.csv")
setnames(cr, old = "USA", new = "cr")
cr <- cr[, c("Dates", "cr")]
cr$Dates <- as.Date(cr$Dates)
cr$Dates <- paste0(year(cr$Dates),"-Q",quarter(cr$Dates))
ts <- read.csv("brownlees\\gar-replication\\data\\input\\ts.csv")
setnames(ts, old = "USA", new = "ts")
ts <- ts[, c("Dates", "ts")]
ts$Dates <- as.Date(ts$Dates)
ts$Dates <- paste0(year(ts$Dates),"-Q",quarter(ts$Dates))
hp <- read.csv("brownlees\\gar-replication\\data\\input\\hp.csv")
setnames(hp, old = "USA", new = "hp")
hp <- hp[, c("Dates", "hp")]
hp$Dates <- as.Date(hp$Dates)
hp$Dates <- paste0(year(hp$Dates),"-Q",quarter(hp$Dates))
data <- merge(data,cg)
data <- merge(data,cr)
data <- merge(data,ts)
data <- merge(data,hp)
View(data)
rqfit1 <- rq(gdp_f~gdp+nfci+cg+cr+ts+hp, data = data)
rqfit2 <- rq(gdp_f~gdp+nfci+nfci^2+cg+cr+ts+hp, data = data)
View(rqfit1)
stargazer(list(rqfit1, rqfit2), title=c("(1)", "(2"))
library(stargazer)
stargazer(list(rqfit1, rqfit2), title=c("(1)", "(2"))
modelsummary(rqfit2)
rqfit2 <- rq(gdp_f~gdp+nfci+nfci**2+cg+cr+ts+hp, data = data)
stargazer(list(rqfit1, rqfit2), title=c("(1)", "(2"))
rqfit1 <- rq(gdp_f~gdp+nfci, data = data)
rqfit2 <- rq(gdp_f~gdp+nfci+nfci**2, data = data)
stargazer(list(rqfit1, rqfit2), title=c("(1)", "(2"))
rqfit2 <- rq(gdp_f~gdp+nfci+nfci*nfci, data = data)
stargazer(list(rqfit1, rqfit2), title=c("(1)", "(2"))
rqfit2 <- rq(gdp_f~gdp+poly(nfci,2), data = data)
stargazer(list(rqfit1, rqfit2), title=c("(1)", "(2"))
rqfit1 <- rq(gdp_f~gdp+nfci+cg+cr+ts+hp, data = data)
rqfit2 <- rq(gdp_f~gdp+poly(nfci,2)+cg+cr+ts+hp, data = data)
stargazer(list(rqfit1, rqfit2), title=c("(1)","(2)"))
# Parameters
sigma_u = 1.257
beta = 0.529
gamma = 0.044
# Load data
data <- read.csv("data\\data.csv")
# Calculate conditional variance
for (i in 1:nrow(data)){
if (i == 1){
data[i,"sigma_it"] <- sigma_u - gamma*data[i,"nfci"]
}
else {
data[i,"sigma_it"] <- (1-beta)*(sigma_u - gamma*data[i,"nfci"]) + beta*data[i-1,"sigma_it"]
}
}
## Simulate path of GaR
# Simulate to get conditional quantiles of the error terms
for (i in 1:nrow(data)){
data[i, "quant_it"] <- quantile(rnorm(100, 0, data[i,"sigma_it"]), probs = 0.05)
}
# Fit linear model for conditional mean
m1 <- lm(gdp_f ~ gdp + nfci, data = data)
data[,"gdp_fit"] <- m1$coefficients[1] + m1$coefficients[2]*data[,"gdp"] + m1$coefficients[3]*data[,"nfci"]
data[,"gar_est"] <- data[,"gdp_fit"] + data[,"quant_it"]
# Create plots
ggplot(data, aes(x = nfci, y = gar_est)) + geom_point() + theme_classic() + ylab(expression(GaR[.05]^{t+4})) + xlab("NFCI") + title("h=4, n=100")
ggsave("output\\figures\\plot_raw.png")
ggplot(data, aes(x = nfci, y = gar_est)) + geom_point() + theme_classic() + ylab(expression(GaR[.05]^{t+4})) + xlab("NFCI") + title("h=4, n=100") +
geom_smooth(method='lm', formula= y~x, se = FALSE) + geom_smooth(method='lm', formula= y~poly(x,2), se = FALSE, color = "red")
ggsave("output\\figures\\plot_lmfit.png")
# Parameters
sigma_u = 1.257
beta = 0.529
gamma = 0.044
# Load data
data <- read.csv("data\\data.csv")
# Calculate conditional variance
for (i in 1:nrow(data)){
if (i == 1){
data[i,"sigma_it"] <- sigma_u - gamma*data[i,"nfci"]
}
else {
data[i,"sigma_it"] <- (1-beta)*(sigma_u - gamma*data[i,"nfci"]) + beta*data[i-1,"sigma_it"]
}
}
## Simulate path of GaR
# Simulate to get conditional quantiles of the error terms
for (i in 1:nrow(data)){
data[i, "quant_it"] <- quantile(rnorm(100, 0, data[i,"sigma_it"]), probs = 0.05)
}
# Fit linear model for conditional mean
m1 <- lm(gdp_f ~ gdp + nfci, data = data)
data[,"gdp_fit"] <- m1$coefficients[1] + m1$coefficients[2]*data[,"gdp"] + m1$coefficients[3]*data[,"nfci"]
data[,"gar_est"] <- data[,"gdp_fit"] + data[,"quant_it"]
# Create plots
ggplot(data, aes(x = nfci, y = gar_est)) + geom_point() + theme_classic() + ylab(expression(GaR[.05]^{t+4})) + xlab("NFCI") + ggtitle("h=4, n=100")
ggsave("output\\figures\\plot_raw.png")
ggplot(data, aes(x = nfci, y = gar_est)) + geom_point() + theme_classic() + ylab(expression(GaR[.05]^{t+4})) + xlab("NFCI") + ggtitle("h=4, n=100") +
geom_smooth(method='lm', formula= y~x, se = FALSE) + geom_smooth(method='lm', formula= y~poly(x,2), se = FALSE, color = "red")
ggsave("output\\figures\\plot_lmfit.png")
set.seed(1234)
# Parameters
sigma_u = 1.257
beta = 0.529
gamma = 0.044
# Load data
data <- read.csv("data\\data.csv")
# Calculate conditional variance
for (i in 1:nrow(data)){
if (i == 1){
data[i,"sigma_it"] <- sigma_u - gamma*data[i,"nfci"]
}
else {
data[i,"sigma_it"] <- (1-beta)*(sigma_u - gamma*data[i,"nfci"]) + beta*data[i-1,"sigma_it"]
}
}
## Simulate path of GaR
# Simulate to get conditional quantiles of the error terms
for (i in 1:nrow(data)){
data[i, "quant_it"] <- quantile(rnorm(100, 0, data[i,"sigma_it"]), probs = 0.05)
}
# Fit linear model for conditional mean
m1 <- lm(gdp_f ~ gdp + nfci, data = data)
data[,"gdp_fit"] <- m1$coefficients[1] + m1$coefficients[2]*data[,"gdp"] + m1$coefficients[3]*data[,"nfci"]
data[,"gar_est"] <- data[,"gdp_fit"] + data[,"quant_it"]
# Create plots
ggplot(data, aes(x = nfci, y = gar_est)) + geom_point() + theme_classic() + ylab(expression(GaR[.05]^{t+4})) + xlab("NFCI") + ggtitle("h=4, n=100")
ggsave("output\\figures\\plot_raw.png")
ggplot(data, aes(x = nfci, y = gar_est)) + geom_point() + theme_classic() + ylab(expression(GaR[.05]^{t+4})) + xlab("NFCI") + ggtitle("h=4, n=100") +
geom_smooth(method='lm', formula= y~x, se = FALSE) + geom_smooth(method='lm', formula= y~poly(x,2), se = FALSE, color = "red")
ggsave("output\\figures\\plot_lmfit.png")
?ggtitle
ggplot(data, aes(x = nfci, y = gar_est)) + geom_point() + theme_classic() + ylab(expression(GaR[.05]^{t+4})) + xlab("NFCI") + labs(title="h=4, n=100")
ggplot(data, aes(x = nfci, y = gar_est)) + geom_point() + theme_bw() + ylab(expression(GaR[.05]^{t+4})) + xlab("NFCI") + labs(title="h=4, n=100")
ggplot(data, aes(x = nfci, y = gar_est)) + geom_point() + theme_bw() + ylab(expression(GaR[.05]^{t+4})) + xlab("NFCI") + labs(title="h=4, n=100") + theme(plot.title = element_text(hjust = 0.5))
ggplot(data, aes(x = nfci, y = gar_est)) + geom_point() + theme_bw() + ylab(expression(GaR[.05]^{t+4})) + xlab("NFCI") + labs(title="h=4, n=100") + theme(plot.title = element_text(hjust = 0.5))
ggsave("output\\figures\\plot_raw.png")
ggplot(data, aes(x = nfci, y = gar_est)) + geom_point() + theme_classic() + ylab(expression(GaR[.05]^{t+4})) + xlab("NFCI") + labs(title="h=4, n=100") + theme(plot.title = element_text(hjust = 0.5)) +
geom_smooth(method='lm', formula= y~x, se = FALSE) + geom_smooth(method='lm', formula= y~poly(x,2), se = FALSE, color = "red")
ggsave("output\\figures\\plot_lmfit.png")
ggplot(data, aes(x = nfci, y = gar_est)) + geom_point() + theme_bw() + ylab(expression(GaR[.05]^{t+4})) + xlab("NFCI") + labs(title="h=4, n=100") + theme(plot.title = element_text(hjust = 0.5)) +
geom_smooth(method='lm', formula= y~x, se = FALSE) + geom_smooth(method='lm', formula= y~poly(x,2), se = FALSE, color = "red")
ggsave("output\\figures\\plot_lmfit.png")
# Forecast horizon
h <- 1
nfci <- read.csv("brownlees\\gar-replication\\data\\input\\nfci.csv")
setnames(nfci, old = "USA", new = "nfci")
nfci_us <- nfci[, c("Dates", "nfci")]
gdp <- read.csv("brownlees\\gar-replication\\data\\input\\gdp.csv")
setnames(gdp, old = "USA", new = "gdp")
gdp_us <- gdp[, c("Dates", "gdp")]
# create lagged values at relevant forecast horizon
gdp_us[,"gdp_f"] <- sapply(1:nrow(gdp_us), function(x) gdp_us[,"gdp"][x+h])
# Merge datatables
data <- merge(gdp_us, nfci_us, by = "Dates")
write.csv(data, file = "data\\data.csv")
# Parameters
sigma_u = 1.257
beta = 0.529
gamma = 0.044
# Load data
data <- read.csv("data\\data.csv")
# Calculate conditional variance
for (i in 1:nrow(data)){
if (i == 1){
data[i,"sigma_it"] <- sigma_u - gamma*data[i,"nfci"]
}
else {
data[i,"sigma_it"] <- (1-beta)*(sigma_u - gamma*data[i,"nfci"]) + beta*data[i-1,"sigma_it"]
}
}
## Simulate path of GaR
# Simulate to get conditional quantiles of the error terms
for (i in 1:nrow(data)){
data[i, "quant_it"] <- quantile(rnorm(100, 0, data[i,"sigma_it"]), probs = 0.05)
}
# Fit linear model for conditional mean
m1 <- lm(gdp_f ~ gdp + nfci, data = data)
data[,"gdp_fit"] <- m1$coefficients[1] + m1$coefficients[2]*data[,"gdp"] + m1$coefficients[3]*data[,"nfci"]
data[,"gar_est"] <- data[,"gdp_fit"] + data[,"quant_it"]
# Create plots
ggplot(data, aes(x = nfci, y = gar_est)) + geom_point() + theme_bw() + ylab(expression(GaR[.05]^{t+4})) + xlab("NFCI") + labs(title="h=4, n=100") + theme(plot.title = element_text(hjust = 0.5))
ggplot(data, aes(x = nfci, y = gar_est)) + geom_point() + theme_bw() + ylab(expression(GaR[.05]^{t+4})) + xlab("NFCI") + labs(title="h=1, n=100") + theme(plot.title = element_text(hjust = 0.5))
ggsave("output\\figures\\plot_raw.png")
source("code\\create_data.R")
library(ggplot2)
library(quantreg)
library(data.table)
library(zoo)
library(lubridate)
library(stargazer)
#Housekeeping
set.seed(1234)
rm(list = ls())
#Initialize parameters
sigma_u = 1.257
beta = 0.529
gamma = 0.044
h <- 4
# Main file
setwd("C:/Users/Usuario/Desktop/Brown/Term 2/AEA/Final Project")
source("code\\create_data.R")
source("code\\create_data.R")
source("code\\simulation.R")
source("code\\qrg.R")
source("code\\qreg.R")
# Regression analysis
data <- read.csv("data\\data.csv")
cg <- read.csv("brownlees\\gar-replication\\data\\input\\cg.csv")
setnames(cg, old = "USA", new = "cg")
cg <- cg[, c("Dates", "cg")]
cg$Dates <- as.Date(cg$Dates)
cg$Dates <- paste0(year(cg$Dates),"-Q",quarter(cg$Dates))
cr <- read.csv("brownlees\\gar-replication\\data\\input\\cr.csv")
setnames(cr, old = "USA", new = "cr")
cr <- cr[, c("Dates", "cr")]
cr$Dates <- as.Date(cr$Dates)
cr$Dates <- paste0(year(cr$Dates),"-Q",quarter(cr$Dates))
ts <- read.csv("brownlees\\gar-replication\\data\\input\\ts.csv")
setnames(ts, old = "USA", new = "ts")
ts <- ts[, c("Dates", "ts")]
ts$Dates <- as.Date(ts$Dates)
ts$Dates <- paste0(year(ts$Dates),"-Q",quarter(ts$Dates))
hp <- read.csv("brownlees\\gar-replication\\data\\input\\hp.csv")
setnames(hp, old = "USA", new = "hp")
hp <- hp[, c("Dates", "hp")]
hp$Dates <- as.Date(hp$Dates)
hp$Dates <- paste0(year(hp$Dates),"-Q",quarter(hp$Dates))
data <- merge(data,cg)
data <- merge(data,cr)
data <- merge(data,ts)
data <- merge(data,hp)
rqfit1 <- rq(gdp_f~gdp+nfci+cg+cr+ts+hp, data = data)
rqfit2 <- rq(gdp_f~gdp+poly(nfci,2)+cg+cr+ts+hp, data = data)
stargazer(list(rqfit1, rqfit2), title=c("(1)","(2)"), out = "output\\tables\\table.tex")
